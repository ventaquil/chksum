name: Continuous Integration

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: read

on:
  push:
    branches:
      - master
      - dev
    paths:
      - ".github/workflows/*.yml"
      - "Cargo.lock"
      - "*/Cargo.toml"
      - "*/build.rs"
      - "*/src/**.rs"
      - "*/tests/**.rs"
  pull_request:
    branches:
      - master
      - dev
    paths:
      - ".github/workflows/*.yml"
      - "Cargo.lock"
      - "*/Cargo.toml"
      - "*/build.rs"
      - "*/src/**.rs"
      - "*/tests/**.rs"

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Lint
    permissions:
      checks: write
      contents: write
      pull-requests: write
    steps:
      - name: Repository checkout
        uses: actions/checkout@v3
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          default: true
          profile: minimal
          components: rustfmt, clippy
      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all --check
      - name: Run cargo clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --locked --no-deps

  deny:
    runs-on: ubuntu-latest
    name: Deny
    steps:
      - name: Repository checkout
        uses: actions/checkout@v3
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          default: true
          profile: minimal
      - name: Install cargo deny
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-deny
      - name: Run cargo deny
        uses: actions-rs/cargo@v1
        with:
          command: deny
          args: --all-features --locked check

  build-and-test-linux:
    needs:
      - deny
      - lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        toolchain: [stable, beta, nightly]
    name: "Build and test (OS: Linux, Toolchain: ${{ matrix.toolchain }})"
    steps:
      - name: Repository checkout
        uses: actions/checkout@v3
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          default: true
          profile: minimal
      - name: Run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --locked --all-features
      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --locked --all-features

  build-and-test-macos:
    needs:
      - deny
      - lint
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        toolchain: [stable, beta, nightly]
    name: "Build and test (OS: MacOS, Toolchain: ${{ matrix.toolchain }})"
    steps:
      - name: Repository checkout
        uses: actions/checkout@v3
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          default: true
          profile: minimal
      - name: Run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --locked --all-features
      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --locked --all-features

  build-and-test-windows:
    needs:
      - deny
      - lint
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        toolchain: [stable, beta, nightly]
    name: "Build and test (OS: Windows, Toolchain: ${{ matrix.toolchain }})"
    steps:
      - name: Repository checkout
        uses: actions/checkout@v3
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          default: true
          profile: minimal
      - name: Run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --locked --all-features
      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --locked --all-features

  coverage:
    needs:
      - deny
      - lint
    runs-on: ubuntu-latest
    name: Coverage
    steps:
      - name: Repository checkout
        uses: actions/checkout@v3
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          default: true
          profile: minimal
      - name: Install cargo tarpaulin
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-tarpaulin
      - name: Run cargo tarpaulin
        run: cargo tarpaulin --all-features --all-targets --fail-under 50 --follow-exec --ignore-tests --out xml --timeout 120
      - name: Upload to codecov.io
        if: ${{ always() }}
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

  coverage-per-package:
    needs:
      - deny
      - lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: [chksum, chksum-cli]
    name: "Coverage (Package: ${{ matrix.package }})"
    steps:
      - name: Repository checkout
        uses: actions/checkout@v3
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          default: true
          profile: minimal
      - name: Install cargo tarpaulin
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-tarpaulin
      - name: Run cargo tarpaulin
        run: cargo tarpaulin --all-features --all-targets --exclude-files '../*' --fail-under 50 --follow-exec --ignore-tests --out xml --root ${{ matrix.package }} --timeout 120
      - name: Upload to codecov.io
        if: ${{ always() }}
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: ${{ matrix.package }}
          fail_ci_if_error: true
